export type TCurrencyOptions = {
    currency?: string;
    currencyDisplay?: 'narrowSymbol' | 'code' | 'hidden';
};
/**
 * Returns a formatted amount of money in a specific language and currency if `amount` present a numeric value; otherwise returns `undefined`.
 *
 * @param amount - An amount of money.
 * @param locale - Language code or locale (Ex: `'vi'`, `'vi-VN'`).
 * - Default: `'vi'`
 * @param options
 * - Default: an object with the following options
 * @param options.currency - Currency code (Ex: `'VND'`, `'USD'`).
 * - Default: `'VND'`
 * @param options.currencyDisplay - An options determines which currency code is diplayed.
 * - Default: `'narrowSymbol'`
 * - `'narrowSymbol'` => â‚«, $
 * - `'code'` => VND, USD
 * - `'hidden'` => without displaying currency code
 *
 * @example
 * // Viet Nam Dong
 * formatCurrency(5000000.117)                                    => "5.000.000 â‚«"
 * formatCurrency(5000000.117, 'vi', { currencyDisplay: 'code' }) => "5.000.000 VND"
 * formatCurrency(5000000.117, 'vi', { currencyDisplay: 'hidden' }) => "5.000.000"
 * formatCurrency(5000000.117, 'en')                              => "â‚«5,000,000"
 *
 * // USD
 * formatCurrency(5000000.117, 'vi', { currency: 'USD' })                          => "5.000.000,12 $"
 * formatCurrency(5000000.117, 'vi', { currency: 'USD', currencyDisplay: 'code' }) => "5.000.000,12 USD"
 * formatCurrency(5000000.117, 'en', { currency: 'USD'})                           => "$5,000,000.12"
 * formatCurrency(5000000.117, 'en', { currency: 'USD', currencyDisplay: 'code' }) => "USD 5,000,000.12"
 *
 */
export declare const formatCurrency: (amount: number | string, locale?: string, options?: TCurrencyOptions) => string | undefined;
export declare const getCurrencySymbol: (locale: string, options?: TCurrencyOptions) => string | undefined;
export declare const getDecimal: (locale: string, options?: TCurrencyOptions) => string;
export declare const getFraction: (locale: string, options?: TCurrencyOptions) => string | undefined;
export declare const unformatCurrency: (str: string, locale?: string) => number;
