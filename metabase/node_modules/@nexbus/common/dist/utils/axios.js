"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.del = exports.patch = exports.put = exports.post = exports.get = void 0;
const get = async (client, path, config = { headers: {}, responseType: 'json' }) => {
    try {
        const resp = await client.get(path, config);
        const { status, statusText, data } = resp;
        return { status, statusText, data };
    }
    catch (error) {
        handleAxiosError(error); // throws an error
        throw error; // never run this line, omit the error from typescript compiler
    }
};
exports.get = get;
const post = async (client, path, body, config = { params: {}, headers: {} }) => {
    try {
        const resp = await client.post(path, body, config);
        const { status, statusText, data } = resp;
        return { status, statusText, data };
    }
    catch (error) {
        handleAxiosError(error); // throws an error
        throw error; // never run this line, omit the error from typescript compiler
    }
};
exports.post = post;
const put = async (client, path, body, config = { params: {}, headers: {} }) => {
    try {
        const resp = await client.put(path, body, config);
        const { status, statusText, data } = resp;
        return { status, statusText, data };
    }
    catch (error) {
        handleAxiosError(error); // throws an error
        throw error; // never run this line, omit the error from typescript compiler
    }
};
exports.put = put;
const patch = async (client, path, body, config = { params: {}, headers: {} }) => {
    try {
        const resp = await client.patch(path, body, config);
        const { status, statusText, data } = resp;
        return { status, statusText, data };
    }
    catch (error) {
        handleAxiosError(error); // throws an error
        throw error; // never run this line, omit the error from typescript compiler
    }
};
exports.patch = patch;
const del = async (client, path, config = { params: {}, headers: {} }) => {
    try {
        const resp = await client.delete(path, config);
        const { status, statusText, data } = resp;
        return { status, statusText, data };
    }
    catch (error) {
        handleAxiosError(error); // throws an error
        throw error; // never run this line, omit the error from typescript compiler
    }
};
exports.del = del;
const handleAxiosError = (error) => {
    var _a, _b, _c, _d, _e;
    console.log('error.config', error.config);
    // The request was made and the server responded with a status code
    // that falls out of the range of 2xx
    if (error.response) {
        let responseDataStringified = error.response.data;
        let errorDetailsStringified = (_b = (_a = error.response.data) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.details;
        // The JSON.stringify function throws an exception if the given data cannot parse to string
        try {
            responseDataStringified = (_c = JSON.stringify(responseDataStringified)) !== null && _c !== void 0 ? _c : '';
            errorDetailsStringified = (_d = JSON.stringify(errorDetailsStringified)) !== null && _d !== void 0 ? _d : 'undefined';
        }
        catch (_f) { }
        console.log('error.response.data', responseDataStringified);
        console.log('error.response.data?.error?.details', errorDetailsStringified);
        console.log('error.response.status', error.response.status);
        console.log('error.response.headers', error.response.headers);
        if ((_e = error.response.data) === null || _e === void 0 ? void 0 : _e.error) {
            throw error.response.data.error;
        }
    }
    else if (error.request) {
        // The request was made but no response was received
        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
        // http.ClientRequest in node.js
        console.log('error.request', error.request);
    }
    else {
        // Something happened in setting up the request that triggered an Error
        console.log('error.message', error.message);
    }
};
//# sourceMappingURL=axios.js.map