"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unformatCurrency = exports.getFraction = exports.getDecimal = exports.getCurrencySymbol = exports.formatCurrency = void 0;
/**
 * Returns a formatted amount of money in a specific language and currency if `amount` present a numeric value; otherwise returns `undefined`.
 *
 * @param amount - An amount of money.
 * @param locale - Language code or locale (Ex: `'vi'`, `'vi-VN'`).
 * - Default: `'vi'`
 * @param options
 * - Default: an object with the following options
 * @param options.currency - Currency code (Ex: `'VND'`, `'USD'`).
 * - Default: `'VND'`
 * @param options.currencyDisplay - An options determines which currency code is diplayed.
 * - Default: `'narrowSymbol'`
 * - `'narrowSymbol'` => ₫, $
 * - `'code'` => VND, USD
 * - `'hidden'` => without displaying currency code
 *
 * @example
 * // Viet Nam Dong
 * formatCurrency(5000000.117)                                    => "5.000.000 ₫"
 * formatCurrency(5000000.117, 'vi', { currencyDisplay: 'code' }) => "5.000.000 VND"
 * formatCurrency(5000000.117, 'vi', { currencyDisplay: 'hidden' }) => "5.000.000"
 * formatCurrency(5000000.117, 'en')                              => "₫5,000,000"
 *
 * // USD
 * formatCurrency(5000000.117, 'vi', { currency: 'USD' })                          => "5.000.000,12 $"
 * formatCurrency(5000000.117, 'vi', { currency: 'USD', currencyDisplay: 'code' }) => "5.000.000,12 USD"
 * formatCurrency(5000000.117, 'en', { currency: 'USD'})                           => "$5,000,000.12"
 * formatCurrency(5000000.117, 'en', { currency: 'USD', currencyDisplay: 'code' }) => "USD 5,000,000.12"
 *
 */
const formatCurrency = (amount, locale = 'vi', options = { currency: 'VND', currencyDisplay: 'narrowSymbol' }) => {
    var _a, _b;
    try {
        let value = NaN;
        if (typeof amount === 'number') {
            value = amount;
        }
        else if (typeof amount === 'string') {
            value = parseFloat(amount);
        }
        // not a number
        if (Number.isNaN(value)) {
            return undefined;
        }
        const safeLocale = locale !== null && locale !== void 0 ? locale : 'vi';
        let safeOptions = {};
        if (options.currencyDisplay !== 'hidden') {
            safeOptions = {
                style: 'currency',
                currency: (_a = options.currency) !== null && _a !== void 0 ? _a : 'VND',
                currencyDisplay: (_b = options.currencyDisplay) !== null && _b !== void 0 ? _b : 'narrowSymbol',
            };
        }
        return value.toLocaleString(safeLocale, safeOptions);
    }
    catch (_c) {
        return undefined;
    }
};
exports.formatCurrency = formatCurrency;
const getCurrencySymbol = (locale, options = { currency: 'VND', currencyDisplay: 'narrowSymbol' }) => {
    var _a;
    const safeLocale = locale || 'vi';
    const safeOptions = {
        style: 'currency',
        currency: options.currency || 'VND',
        currencyDisplay: options.currencyDisplay || 'narrowSymbol',
    };
    const intl = new Intl.NumberFormat(safeLocale, safeOptions);
    const parts = intl.formatToParts(1);
    return (_a = parts.find(v => v.type === 'currency')) === null || _a === void 0 ? void 0 : _a.value;
};
exports.getCurrencySymbol = getCurrencySymbol;
const getDecimal = (locale, options = { currency: 'VND', currencyDisplay: 'narrowSymbol' }) => {
    var _a;
    const safeLocale = locale || 'vi';
    const safeOptions = {
        style: 'currency',
        currency: options.currency || 'VND',
        currencyDisplay: options.currencyDisplay || 'narrowSymbol',
    };
    const intl = new Intl.NumberFormat(safeLocale, safeOptions);
    const parts = intl.formatToParts(1);
    return ((_a = parts.find(v => v.type === 'decimal')) === null || _a === void 0 ? void 0 : _a.value) || ',';
};
exports.getDecimal = getDecimal;
const getFraction = (locale, options = { currency: 'VND', currencyDisplay: 'narrowSymbol' }) => {
    var _a;
    const safeLocale = locale || 'vi';
    const safeOptions = {
        style: 'currency',
        currency: options.currency || 'VND',
        currencyDisplay: options.currencyDisplay || 'narrowSymbol',
    };
    const intl = new Intl.NumberFormat(safeLocale, safeOptions);
    const parts = intl.formatToParts(1);
    return (_a = parts.find(v => v.type === 'fraction')) === null || _a === void 0 ? void 0 : _a.value;
};
exports.getFraction = getFraction;
const unformatCurrency = (str, locale = 'vi') => {
    const decimal = (0, exports.getDecimal)(locale);
    // strip out all except digits, demical, minus sign
    const regex = new RegExp(`[^0-9-${decimal}]`, 'g');
    const striped = str.replace(regex, '').replace(decimal, '.');
    return parseFloat(striped);
};
exports.unformatCurrency = unformatCurrency;
//# sourceMappingURL=money.js.map